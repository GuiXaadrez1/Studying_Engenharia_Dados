# Dando nome para o nossa Action
name: Python Script WorkFlows

# Definindo um evento ou gatilho
on:
  push: # se fizer um push
    branches: # nesta branch
      - main

  pull_request: # se fizer um pull request
    branches: # nesta branch
      - main

# executando um bloco de tarefas!
jobs:
  # bloco de tarefas 1
  job1:
    # escolhendo o nosso runner
    runs-on: ubuntu-latest # lembrando ubuntu é uma distribuição do S.O Linux

    # tarefa dentro de um bloco de tarefas
    # É o bloco atômico de execução — cada step roda um comando ou uma ação (action).
    steps:
      # Colocando um nome descritivo que aparece nos logs do Action no GitHub
      - name: Checkout repository
        # Usa uma ação pronta do marketplace ou oficial.
        uses: actions/checkout@v4

        # actions -> Nome do dono do repositório no GitHub (github.com/actions/checkout).
        # Nome da ação. É uma ação oficial, mantida pelo próprio GitHub.

        # Essa ação foi criada especificamente para:
        # ✅ Fazer clone/checkout do repositório onde o workflow está rodando.
        # ✅ Preparar o workspace para os próximos passos (build, test, deploy).
        # ✅ Trazer o código-fonte para dentro do runner virtual (máquina virtual Linux/Windows/Mac).

        # Na prática, actions/checkout@v4 faz um clone do seu repositório Git dentro
        # da máquina virtual (runner) que o GitHub Actions cria para rodar o seu
        # pipeline CI/CD.

      - name: Setup Python Version
        uses: actions/setup-python@v4

        # uses: actions/setup-python@v4
        # Diz ao runner "use a ação oficial setup-python na versão v4".
        # Essa action oficial, mantida pelo GitHub, instala e configura a versão do 
        # Python que seu workflow vai usar.

        # Define qual versão do Python vai ser instalada no runner
        with:
          python-version: '3.11'

        # criando o nosso ambiente virtual, pois coloquei o meu venv no .gitignore 
        # e acabei esquecendo deste detalhe rsrsrs..
        # por isso deu error 

      - name: Criar ambiente virtual
        working-directory: ./Ciência_Dados/codes
        run: python -m venv .venv        

      - name: Instalar dependências no ambiente virtual
        # Roda todos os comandos dentro da pasta codes
        working-directory: ./Ciência_Dados/codes
        run: |
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install -r requirements.txt
          .venv/bin/pip install numpy

      - name: Executar script dimensionalidade usando o python do venv
        # Roda o script python na pasta src/dimensionalidade
        working-directory: ./Ciência_Dados/codes/src/dimensionalidade
        # Executando com o python do ambiente virtual e não global
        run: ../../.venv/bin/python dimensao.py
        
        # colocando um log com limmite de um dia com retention-days: 1
      - name: Upload do log como artefato com retenção de 1 dia
        uses: actions/upload-artifact@v4
        with:
          name: log-dimensao
          path: ./Ciência_Dados/codes/src/dimensionalidade/log.txt
          retention-days: 1

# OBSERVAÇÕES

# No GitHub Actions, o repositório é clonado dentro de um path padrão que inclui o nome do
# repo duas vezes, por exemplo:

# /home/runner/work/<repo>/<repo>/

# No meu caso

# /home/runner/work/Studying_Engenharia_Dados/Studying_Engenharia_Dados/

# Cada step:

# Começa com -

# Dentro dele, tudo indentado na mesma coluna

# Se usar uses:, fica junto do name:

# Comentários # podem ficar entre steps ou dentro, mas não quebram blocos

# símbolo | é um indicador de bloco literal para strings multilinhas.

# Ele serve para dizer que o conteúdo que vem logo abaixo será tratado como texto
# exatamente como está, incluindo quebras de linha.

# Equivale a escrever o comando shell assim:

# .venv/bin/pip install --upgrade pip
# .venv/bin/pip install -r requirements.txt

# O parâmetro working-directory: serve para mudar a pasta atual onde o comando vai ser 
# executado, sem precisar fazer um comando cd manual no run:.

# Agora Cloquei os scripts python para serem executados e intepretados pelo
# interpretador com o python do ambiente virtula é executado 
# usando ../../.venv/bin/python, o Python do ambiente virtual.

# actions/upload-artifact@v4 -> pegar um arquivo (ou pasta) gerado no runner
# mandar pro servidor do GitHub Actions como um artefato anexado à execução (run).
# define os parâmetros de entrada da Action.
# Cada Action pode ter suas próprias inputs obrigatórias ou opcionais.
# name: log-dimensao
# Esse é o nome que o artefato vai ter no GitHub Actions.
# Quando o workflow terminar, você verá um link para baixar log-dimensao.zip.
# Pode ser qualquer nome — serve só pra identificar o arquivo na UI do Actions.
# path: ./Ciência_Dados/codes/src/dimensionalidade/log.txt
# path: é o caminho no runner para o(s) arquivo(s) que você quer subir.
# Pode ser:
# Um arquivo (log.txt)
# Uma pasta inteira (./build/)
# Um glob pattern (./reports/**/*.xml)
# Neste caso: está pegando o log.txt que foi gerado pelo seu python dimensao.py > log.txt.
# retention-days: 1
# Controla quantos dias o GitHub vai manter este artefato disponível para download.
# Após 1 dia, o GitHub apaga automaticamente o artefato para liberar espaço.
# Útil pra logs temporários, builds descartáveis, etc.